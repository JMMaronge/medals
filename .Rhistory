?install_github
library(devtools)
?install_github
library(ANTsR)
install_github("muschellij2/extrantsr", upgrade_dependencies=FALSE)
install_github("stnava/ANTsR", ref="713a7b4")
install_github("muschellij2/extrantsr", upgrade_dependencies=FALSE)
setwd("~/Documents/Repos/medals/")
check()
check()
install_github("jmmaronge/medals", upgrade_dependencies=FALSE)
check()
?check
use_travis()
use_travis()
install_github("stnava/ANTsR")
library("ANTsR", lib.loc="/Library/Frameworks/R.framework/Versions/3.5/Resources/library")
install_github("stnava/ANTsRCore")
install_github("stnava/ITKR")
remove.packages(ANTsR)
remove.packages("ANTsR")
install_github("stnava/ANTsR")
install_github("stnava/ANTsR")
library(devtools)
install_github("stnava/ANTsR")
install_github("stnava/ANTsR", INSTALL_opts = c('--no-lock'))
install_github("stnava/ANTsR")
install_github("stnava/ANTsR")
install_github("muschellij2/extrantsr")
install_github("muschellij2/extrantsr", force=TRUE)
devtools::install_github("muschellij2/ANTsR")
devtools::install_github("muschellij2/extrantsr")
devtools::install_github("muschellij2/extrantsr", force=TRUE)
devtools::install_github("muschellij2/ANTsR")
?install
devtools::install_github("muschellij2/extrantsr", force=TRUE, upgrade_dependencies=FALSE)
devtools::install_github("muschellij2/extrantsr", force=TRUE)
library(fslr)
brain <- readnii(file="~/Desktop/ISLES_2015/all_testing/flairTrimmedNormImg_Subject01.nii.gz")
?readnii
brain <- readnii("~/Desktop/ISLES_2015/all_testing/flairTrimmedNormImg_Subject01.nii.gz")
ortho2(brain)
mask <- readnii("~/Desktop/ISLES_2015/all_testing/ymask_Subject01.nii.gz")
ortho2(mask)
ortho2(brain[mask==1])
brain[mask==1]
as.nifti(brain[mask==1])
ortho2(as.nifti(brain[mask==1]))
hist(mask)
brain[mask==1]
brain[[mask==1]]
length(brain)
length(mask)
sum(mask)
length(brain[mask==1])
hist(brain[mask==1])
hist(brain)
?gldrm
library9gldrm
library(gldrm)
?gldrm
?gldrm
?f0.control
?gldrm
?sample
?gldrm
?f0.control
?f0.control
?rbinom
set.seed(1362)
library(nlme)
reps <- 2
pop.m <- 10000
pop.n <- 5
beta0 <- 1;beta1 <- 1.5;beta2 <- 3;beta3 <- 1;beta4 <- 2
sigma <- 1 #overall standard deviation
tau_e <- 0.8 #error correlation
beta0.est <- vector(length = reps) #between piece #estimate
beta0.est.var <- vector(length=reps)  # var of estimate
beta0.covprob <- vector(length=reps) # coverage probability
beta1.est.bw <- vector(length = reps) #between piece #estimate
beta1.est.wi <- vector(length = reps) #within piece
beta1.est.var.bw <- vector(length=reps)  # var of estimate
beta1.est.var.wi <- vector(length=reps)
beta1.covprob.bw <- vector(length=reps) # coverage probability
beta1.covprob.wi <- vector(length=reps)
beta2.est.bw <- vector(length = reps) #between piece #estimate
beta2.est.var.bw <- vector(length=reps)  # var of estimate
beta2.covprob.bw <- vector(length=reps) # coverage probability
beta3.est.bw <- vector(length = reps) #between piece #estimate
beta3.est.wi <- vector(length = reps) #within piece
beta3.est.var.bw <- vector(length=reps)  # var of estimate
beta3.est.var.wi <- vector(length=reps)
beta3.covprob.bw <- vector(length=reps) # coverage probability
beta3.covprob.wi <- vector(length=reps)
beta4.est.bw <- vector(length = reps) #between piece #estimate
beta4.est.wi <- vector(length = reps) #within piece
beta4.est.var.bw <- vector(length=reps)  # var of estimate
beta4.est.var.wi <- vector(length=reps)
beta4.covprob.bw <- vector(length=reps) # coverage probability
beta4.covprob.wi <- vector(length=reps)
for (i in 1:reps) {
u1<-rnorm(pop.m,mean = 0, sd=sigma*sqrt(tau_e)) #cluster samples
u<-rep(u1,each=pop.n) # repeat each cluster sample n times
estar<-rnorm(pop.m*pop.n,mean = 0, sd=sigma*sqrt((1-tau_e))) # samples within   each cluster
err<-u+estar #total error
x<-rnorm(u1,1)
z1 <- rbinom(pop.m, size = 1, prob = 0.1)
z <- rep(z1,each=pop.n)
t <- rep(c(0, 1, 2, 3, 4), pop.m)
y <- beta0 + beta1*x + beta2*z + beta3*t + beta4*z*t + err
dat <- data.frame(id = rep(c(1:pop.m),each=pop.n), x = x, z = z, t = t, int=z*t, y =y)
agg.dat<-aggregate(y~id, dat, sum) # sum y by id
case.samp<-sample(agg.dat$id[agg.dat$y>40],250) #sample cases
control.samp<-sample(agg.dat$id[agg.dat$y<=40],250)# sample controls
samp<-c(case.samp, control.samp)
samp.dat<-subset(dat,dat$id%in%samp) # get dataframe for sampled ids
samp.agg.dat<-aggregate(x~id, samp.dat, mean) #calculate means for x
x.bw<-rep(samp.agg.dat$x,each=pop.n) # match means dimensions with dat
samp.dat$x.bw<-x.bw
samp.dat$x.wi<-samp.dat$x-samp.dat$x.bw # calculate c_ij-x_ibar
samp.agg.dat<-aggregate(z~id, samp.dat, mean) #calculate means for z (not really needed)
z.bw<-rep(samp.agg.dat$z,each=pop.n) # match means dimensions with dat
samp.dat$z.bw<-z.bw
samp.agg.dat<-aggregate(t~id, samp.dat, mean) #calculate means for t
t.bw<-rep(samp.agg.dat$t,each=pop.n) # match means dimensions with dat
samp.dat$t.bw<-t.bw
samp.dat$t.wi<-samp.dat$t-samp.dat$t.bw # calculate t_ij-t_ibar
samp.agg.dat<-aggregate(int~id, samp.dat, mean) #calculate means for interaction
int.bw<-rep(samp.agg.dat$int,each=pop.n) # match means dimensions with dat
samp.dat$int.bw<-int.bw
samp.dat$int.wi<-samp.dat$int-samp.dat$int.bw # calculate z_i*t_ij-z_i*t_ibar
fit <- lme(y~x.bw + x.wi + z.bw + t.bw + t.wi + int.bw + int.wi, data = samp.dat, random = ~1|id)
beta0.est[i]<-fixed.effects(fit)[1]
beta0.est.var[i] <-  diag(vcov(fit))[1]
beta0.covprob[i] <- (intervals(fit)$fixed[1,1] <= beta0&intervals(fit)$fixed[1,3] >= beta0)
beta1.est.bw[i] <- fixed.effects(fit)[2]
beta1.est.wi[i] <- fixed.effects(fit)[3]
beta1.est.var.bw[i] <- diag(vcov(fit))[2]
beta1.est.var.wi[i] <- diag(vcov(fit))[3]
beta1.covprob.bw[i] <- (intervals(fit)$fixed[2,1] <= beta1&intervals(fit)$fixed[2,3] >= beta1)
beta1.covprob.wi[i] <- (intervals(fit)$fixed[3,1] <= beta1&intervals(fit)$fixed[3,3] >= beta1)
beta2.est.bw[i] <- fixed.effects(fit)[4]
beta2.est.var.bw[i] <- diag(vcov(fit))[4]
beta2.covprob.bw[i] <- (intervals(fit)$fixed[4,1] <= beta2&intervals(fit)$fixed[4,3] >= beta2)
beta3.est.bw[i] <- fixed.effects(fit)[5]
beta3.est.wi[i] <- fixed.effects(fit)[6]
beta3.est.var.bw[i] <- diag(vcov(fit))[5]
beta3.est.var.wi[i] <- diag(vcov(fit))[6]
beta3.covprob.bw[i] <- (intervals(fit)$fixed[5,1] <= beta3&intervals(fit)$fixed[5,3] >= beta3)
beta3.covprob.wi[i] <- (intervals(fit)$fixed[6,1] <= beta3&intervals(fit)$fixed[6,3] >= beta3)
beta4.est.bw[i] <- fixed.effects(fit)[7]
beta4.est.wi[i] <-fixed.effects(fit)[8]
beta4.est.var.bw[i] <- diag(vcov(fit))[7]
beta4.est.var.wi[i] <- diag(vcov(fit))[8]
beta4.covprob.bw[i] <- (intervals(fit)$fixed[7,1] <= beta4&intervals(fit)$fixed[7,3] >= beta4)
beta4.covprob.wi[i] <- (intervals(fit)$fixed[8,1] <= beta4&intervals(fit)$fixed[8,3] >= beta4)
fit
}
samp.agg.dat
head(samp.dat)
fit
i
fit <- lme(y~x.bw + x.wi + z.bw + t.bw + t.wi + int.bw + int.wi, data = samp.dat, random = ~1|id)
knitr::opts_chunk$set(echo = TRUE)
library(lmer)
library(reml)
??lmer
library(lme4)
fit <- lme(y~x.bw + x.wi + z.bw + t.bw + t.wi + int.bw + int.wi, data = samp.dat, random = ~1|id)
fit <- lmer(y~x.bw + x.wi + z.bw + t.bw + t.wi + int.bw + int.wi, data = samp.dat, random = ~1|id)
fit <- lmer(y~x.bw + x.wi + z.bw + t.bw + t.wi + int.bw + int.wi + (1|id), data = samp.dat)
fit
head(samp.dat, n=20)
fit <- lmer(y~x.bw + x.wi + z.bw + t + int.bw + int.wi + (1|id), data = samp.dat)
fit
head(samp.dat, n=20)
set.seed(1362)
library(nlme)
reps <- 2
pop.m <- 10000
pop.n <- 5
beta0 <- 1;beta1 <- 1.5;beta2 <- 3;beta3 <- 1;beta4 <- 2
sigma <- 1 #overall standard deviation
tau_e <- 0.8 #error correlation
beta0.est <- vector(length = reps) #between piece #estimate
beta0.est.var <- vector(length=reps)  # var of estimate
beta0.covprob <- vector(length=reps) # coverage probability
beta1.est.bw <- vector(length = reps) #between piece #estimate
beta1.est.wi <- vector(length = reps) #within piece
beta1.est.var.bw <- vector(length=reps)  # var of estimate
beta1.est.var.wi <- vector(length=reps)
beta1.covprob.bw <- vector(length=reps) # coverage probability
beta1.covprob.wi <- vector(length=reps)
beta2.est <- vector(length = reps)
beta2.est.var <- vector(length=reps)  # var of estimate
beta2.covprob <- vector(length=reps) # coverage probability
beta3.est<- vector(length = reps) #between piece #estimate
beta3.est.var<- vector(length=reps)  # var of estimate
beta3.covprob<- vector(length=reps) # coverage probability
beta4.est <- vector(length = reps)
beta4.est.var <- vector(length=reps)  # var of estimate
beta4.covprob <- vector(length=reps) # coverage probability
for (i in 1:reps) {
u1<-rnorm(pop.m,mean = 0, sd=sigma*sqrt(tau_e)) #cluster samples
u<-rep(u1,each=pop.n) # repeat each cluster sample n times
estar<-rnorm(pop.m*pop.n,mean = 0, sd=sigma*sqrt((1-tau_e))) # samples within   each cluster
err<-u+estar #total error
x<-rnorm(u1,1)
z1 <- rbinom(pop.m, size = 1, prob = 0.1)
z <- rep(z1,each=pop.n)
t <- rep(c(0, 1, 2, 3, 4), pop.m)
y <- beta0 + beta1*x + beta2*z + beta3*t + beta4*z*t + err
dat <- data.frame(id = rep(c(1:pop.m),each=pop.n), x = x, z = z, t = t, int=z*t, y =y)
agg.dat<-aggregate(y~id, dat, sum) # sum y by id
case.samp<-sample(agg.dat$id[agg.dat$y>40],250) #sample cases
control.samp<-sample(agg.dat$id[agg.dat$y<=40],250)# sample controls
samp<-c(case.samp, control.samp)
samp.dat<-subset(dat,dat$id%in%samp) # get dataframe for sampled ids
samp.agg.dat<-aggregate(x~id, samp.dat, mean) #calculate means for x
x.bw<-rep(samp.agg.dat$x,each=pop.n) # match means dimensions with dat
samp.dat$x.bw<-x.bw
samp.dat$x.wi<-samp.dat$x-samp.dat$x.bw # calculate c_ij-x_ibar
samp.agg.dat<-aggregate(z~id, samp.dat, mean) #calculate means for z (not really needed)
z.bw<-rep(samp.agg.dat$z,each=pop.n) # match means dimensions with dat
samp.dat$z.bw<-z.bw
samp.agg.dat<-aggregate(t~id, samp.dat, mean) #calculate means for t
t.bw<-rep(samp.agg.dat$t,each=pop.n) # match means dimensions with dat
samp.dat$t.bw<-t.bw
samp.dat$t.wi<-samp.dat$t-samp.dat$t.bw # calculate t_ij-t_ibar
samp.agg.dat<-aggregate(int~id, samp.dat, mean) #calculate means for interaction
int.bw<-rep(samp.agg.dat$int,each=pop.n) # match means dimensions with dat
samp.dat$int.bw<-int.bw
samp.dat$int.wi<-samp.dat$int-samp.dat$int.bw # calculate z_i*t_ij-z_i*t_ibar
fit <- lme(y~x.bw + x.wi + z + t + int, data = samp.dat, random = ~1|id)
beta0.est[i]<-fixed.effects(fit)[1]
beta0.est.var[i] <-  diag(vcov(fit))[1]
beta0.covprob[i] <- (intervals(fit)$fixed[1,1] <= beta0&intervals(fit)$fixed[1,3] >= beta0)
beta1.est.bw[i] <- fixed.effects(fit)[2]
beta1.est.wi[i] <- fixed.effects(fit)[3]
beta1.est.var.bw[i] <- diag(vcov(fit))[2]
beta1.est.var.wi[i] <- diag(vcov(fit))[3]
beta1.covprob.bw[i] <- (intervals(fit)$fixed[2,1] <= beta1&intervals(fit)$fixed[2,3] >= beta1)
beta1.covprob.wi[i] <- (intervals(fit)$fixed[3,1] <= beta1&intervals(fit)$fixed[3,3] >= beta1)
beta2.est[i] <- fixed.effects(fit)[4]
beta2.est.var[i] <- diag(vcov(fit))[4]
beta2.covprob[i] <- (intervals(fit)$fixed[4,1] <= beta2&intervals(fit)$fixed[4,3] >= beta2)
beta3.est[i] <- fixed.effects(fit)[5]
beta3.est.var[i] <- diag(vcov(fit))[5]
beta3.covprob[i] <- (intervals(fit)$fixed[5,1] <= beta3&intervals(fit)$fixed[5,3] >= beta3)
beta4.est[i] <- fixed.effects(fit)[6]
beta4.est.var[i] <- diag(vcov(fit))[6]
beta4.covprob[i] <- (intervals(fit)$fixed[6,1] <= beta4&intervals(fit)$fixed[6,3] >= beta4)
fit
}
fit
install.packages("kableExtra")
library(knitr)
install.packages("blogdown")
blogdown::install_hugo()
