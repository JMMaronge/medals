#model = yij = b0+bxij+eij
m<-200 # number of samples
n<-5 # number within each cluster
reps<-2000 # number of reps for simulation
tau_e_all<-c(0.0,0.2,0.6) # true tau_e
tau_x_all<-c(0.0,0.2,0.6) # true tau_x
b0<-0 # intercept term
rho_all<-c(0.0, 0.05, 0.1) #used to solve for appropriate beta and for rho effective
for (j in 1:1) {
rho<-rho_all[j]
for (k in 1:1) { tau_e<- tau_e_all[k]
for (l in 1:1) { tau_x<-tau_x_all[l]
gam<-(1/n)*(((1+(n-1)*tau_x)/(1+(n-1)*tau_e))+(n-1)*((1-tau_x)/(1-tau_e)))
rho_eff<-sqrt(((rho^2*gam)/(rho^2*gam+(1-rho^2))))
#print(paste0("For rho=",rho,", rho_eff=",rho_eff))
b<-sqrt((rho^2/(1-rho^2)))
pvals<-vector(length = reps)
for (i in 1:reps) {
v<-rnorm(m,mean = 0, sd=sqrt(tau_x))
v<-rep(v,each=n)
xstar<-rnorm(m*n,mean = 0, sd=sqrt(1-tau_x))
x<-v+xstar
u<-rnorm(m,mean = 0, sd=sqrt(tau_e))
u<-rep(u,each=n)
estar<-rnorm(m*n,mean = 0, sd=sqrt(1-tau_e))
err<-u+estar
y<-b0+b*x+err # make outcomes
dat<-data.frame(x=c(x),y=c(y),id=rep(c(1:length(x)),each=n)) #make data
fit<-lme(y~x, data = dat, random = ~1|id,control = lmeControl(opt = "optim")) # fit model
pvals[i]<-summary(fit)$tTable[2,5]
rm(list = c('v','u','estar','err','xstar','x','y','dat'))
}
assign(paste0("pvals_rho_",rho,"_taux_",tau_x,"_taue_",tau_e),pvals)
out<-pvals<=.05
power<-length(subset(out,out==TRUE))/length(out)
}}}
pvals
power
table(out)
dat
gam
fit
summary(fit)
summary(fit)$tTable[2,5]
v
b
y
v<-rnorm(m,mean = 0, sd=sqrt(tau_x))
v<-rep(v,each=n)
xstar<-rnorm(m*n,mean = 0, sd=sqrt(1-tau_x))
x<-v+xstar
u<-rnorm(m,mean = 0, sd=sqrt(tau_e))
u<-rep(u,each=n)
estar<-rnorm(m*n,mean = 0, sd=sqrt(1-tau_e))
err<-u+estar
y<-b0+b*x+err # make outcomes
dat<-data.frame(x=c(x),y=c(y),id=rep(c(1:length(x)),each=n)) #make data
y
x
v<-rnorm(m,mean = 0, sd=sqrt(tau_x))
v<-rep(v,each=n)
v
v<-rnorm(m,mean = 0, sd=sqrt(tau_x))
v<-rep(v,each=n)
v
v<-rnorm(m,mean = 0, sd=sqrt(tau_x))
v<-rep(v,each=n)
v
xstar<-rnorm(m*n,mean = 0, sd=sqrt(1-tau_x))
xstar
x<-v+xstar
v<-rnorm(m,mean = 0, sd=sqrt(tau_x))
v<-rep(v,each=n)
v<-rnorm(m,mean = 0, sd=sqrt(tau_x))
v<-rep(v,each=n)
xstar<-rnorm(m*n,mean = 0, sd=sqrt(1-tau_x))
x<-v+xstar
xstar
x
b0
b1
b
v<-rnorm(m,mean = 0, sd=sqrt(tau_x))
v<-rep(v,each=n)
xstar<-rnorm(m*n,mean = 0, sd=sqrt(1-tau_x))
x<-v+xstar
u<-rnorm(m,mean = 0, sd=sqrt(tau_e))
u<-rep(u,each=n)
estar<-rnorm(m*n,mean = 0, sd=sqrt(1-tau_e))
err<-u+estar
y<-b0+b*x+err # make outcomes
dat<-data.frame(x=c(x),y=c(y),id=rep(c(1:length(x)),each=n)) #make data
fit<-lme(y~x, data = dat, random = ~1|id,control = lmeControl(opt = "optim")) # fit model
pvals[i]<-summary(fit)$tTable[2,5]
summary(fir)
summary(fit)
a<-c(1,4)
b<-c(2,3)
a+b
dat
x<-rnorm(2000,mean = 0,sd=1)
err<-rnorm(2000,mean = 0,sd=1)
y<-x+err
fit(y~x)
summary(lm(y~x))
b
b<-0
x
b*x
y<-b0+b*x+err # make outcomes
dat<-data.frame(x=c(x),y=c(y),id=rep(c(1:length(x)),each=n)) #make data
fit<-lme(y~x, data = dat, random = ~1|id,control = lmeControl(opt = "optim")) # fit model
summary(fit)
plot(x,y)
length(x)
dim(dat)
dat
x
rep(c(1:length(x)),each=n)
rep(c(1:m),each=n)
length(rep(c(1:m),each=n))
length(x)
m*n
v<-rnorm(m,mean = 0, sd=sqrt(tau_x))
v1<-rep(v,each=n)
xstar<-rnorm(m*n,mean = 0, sd=sqrt(1-tau_x))
x<-v1+xstar
length(x)
library(nlme)
#model = yij = b0+bxij+eij
m<-200 # number of samples
n<-5 # number within each cluster
reps<-2000 # number of reps for simulation
tau_e_all<-c(0.0,0.2,0.6) # true tau_e
tau_x_all<-c(0.0,0.2,0.6) # true tau_x
b0<-0 # intercept term
rho_all<-c(0.0, 0.05, 0.1) #used to solve for appropriate beta and for rho effective
for (j in 1:1) {
rho<-rho_all[j]
for (k in 1:3) { tau_e<- tau_e_all[k]
for (l in 1:3) { tau_x<-tau_x_all[l]
gam<-(1/n)*(((1+(n-1)*tau_x)/(1+(n-1)*tau_e))+(n-1)*((1-tau_x)/(1-tau_e)))
rho_eff<-sqrt(((rho^2*gam)/(rho^2*gam+(1-rho^2))))
#print(paste0("For rho=",rho,", rho_eff=",rho_eff))
b<-sqrt((rho^2/(1-rho^2)))
pvals<-vector(length = reps)
for (i in 1:reps) {
v<-rnorm(m,mean = 0, sd=sqrt(tau_x))
v1<-rep(v,each=n)
xstar<-rnorm(m*n,mean = 0, sd=sqrt(1-tau_x))
x<-v1+xstar
u<-rnorm(m,mean = 0, sd=sqrt(tau_e))
u1<-rep(u,each=n)
estar<-rnorm(m*n,mean = 0, sd=sqrt(1-tau_e))
err<-u1+estar
y<-b0+b*x+err # make outcomes
dat<-data.frame(x=c(x),y=c(y),id=rep(c(1:m),each=n)) #make data
fit<-lme(y~x, data = dat, random = ~1|id,control = lmeControl(opt = "optim")) # fit model
pvals[i]<-summary(fit)$tTable[2,5]
}
assign(paste0("pvals_rho_",rho,"_taux_",tau_x,"_taue_",tau_e),pvals)
out<-pvals<=.05
power<-length(subset(out,out==TRUE))/length(out)
}}}
power
library(nlme)
#model = yij = b0+bxij+eij
m<-200 # number of samples
n<-5 # number within each cluster
reps<-2000 # number of reps for simulation
tau_e_all<-c(0.0,0.2,0.6) # true tau_e
tau_x_all<-c(0.0,0.2,0.6) # true tau_x
b0<-0 # intercept term
rho_all<-c(0.0, 0.05, 0.1) #used to solve for appropriate beta and for rho effective
for (j in 1:3) {
rho<-rho_all[j]
for (k in 1:3) { tau_e<- tau_e_all[k]
for (l in 1:3) { tau_x<-tau_x_all[l]
gam<-(1/n)*(((1+(n-1)*tau_x)/(1+(n-1)*tau_e))+(n-1)*((1-tau_x)/(1-tau_e)))
rho_eff<-sqrt(((rho^2*gam)/(rho^2*gam+(1-rho^2))))
#print(paste0("For rho=",rho,", rho_eff=",rho_eff))
b<-sqrt((rho^2/(1-rho^2)))
pvals<-vector(length = reps)
for (i in 1:reps) {
v<-rnorm(m,mean = 0, sd=sqrt(tau_x))
v1<-rep(v,each=n)
xstar<-rnorm(m*n,mean = 0, sd=sqrt(1-tau_x))
x<-v1+xstar
u<-rnorm(m,mean = 0, sd=sqrt(tau_e))
u1<-rep(u,each=n)
estar<-rnorm(m*n,mean = 0, sd=sqrt(1-tau_e))
err<-u1+estar
y<-b0+b*x+err # make outcomes
dat<-data.frame(x=c(x),y=c(y),id=rep(c(1:m),each=n)) #make data
fit<-lme(y~x, data = dat, random = ~1|id,control = lmeControl(opt = "optim")) # fit model
pvals[i]<-summary(fit)$tTable[2,5]
}
assign(paste0("pvals_rho_",rho,"_taux_",tau_x,"_taue_",tau_e),pvals)
out<-pvals<=.05
power<-length(subset(out,out==TRUE))/length(out)
}}}
length(subset(out,out==TRUE))/length(out)
out<-pvals_rho_0_taux_0_taue_0<=.05
power<-length(subset(out,out==TRUE))/length(out)
ci<-1.96*sqrt(((power*(1-power))/2000))
power-ci
power+ci
power
out<-pvals_rho_0_taux_0.2_taue_0<=.05
power<-length(subset(out,out==TRUE))/length(out)
ci<-1.96*sqrt(((power*(1-power))/2000))
power
power-ci
power+ci
out<-pvals_rho_0_taux_0.6_taue_0<=.05
power<-length(subset(out,out==TRUE))/length(out)
ci<-1.96*sqrt(((power*(1-power))/2000))
power
power-ci
power+ci
out<-pvals_rho_0_taux_0_taue_0.2<=.05
power<-length(subset(out,out==TRUE))/length(out)
ci<-1.96*sqrt(((power*(1-power))/2000))
power
power-ci
power+ci
out<-pvals_rho_0_taux_0.2_taue_0.2<=.05
power<-length(subset(out,out==TRUE))/length(out)
ci<-1.96*sqrt(((power*(1-power))/2000))
power
power-ci
power+ci
out<-pvals_rho_0_taux_0.6_taue_0.2<=.05
power<-length(subset(out,out==TRUE))/length(out)
ci<-1.96*sqrt(((power*(1-power))/2000))
power
power-ci
power+ci
out<-pvals_rho_0_taux_0_taue_0.6<=.05
power<-length(subset(out,out==TRUE))/length(out)
ci<-1.96*sqrt(((power*(1-power))/2000))
power
power-ci
power+ci
out<-pvals_rho_0_taux_0.2_taue_0.6<=.05
power<-length(subset(out,out==TRUE))/length(out)
ci<-1.96*sqrt(((power*(1-power))/2000))
power
power-ci
power+ci
out<-pvals_rho_0_taux_0.6_taue_0.6<=.05
power<-length(subset(out,out==TRUE))/length(out)
ci<-1.96*sqrt(((power*(1-power))/2000))
power
power-ci
power+ci
out<-pvals_rho_0.05_taux_0_taue_0<=.05
power<-length(subset(out,out==TRUE))/length(out)
ci<-1.96*sqrt(((power*(1-power))/2000))
power
power-ci
power+ci
out<-pvals_rho_0.05_taux_0.2_taue_0<=.05
power<-length(subset(out,out==TRUE))/length(out)
ci<-1.96*sqrt(((power*(1-power))/2000))
power
power-ci
power+ci
out<-pvals_rho_0.05_taux_0.0_taue_0<=.05
power<-length(subset(out,out==TRUE))/length(out)
ci<-1.96*sqrt(((power*(1-power))/2000))
power
power-ci
power+ci
out<-pvals_rho_0.05_taux_0_taue_0<=.05
power<-length(subset(out,out==TRUE))/length(out)
ci<-1.96*sqrt(((power*(1-power))/2000))
power
power-ci
power+ci
out<-pvals_rho_0.05_taux_0.2_taue_0<=.05
power<-length(subset(out,out==TRUE))/length(out)
ci<-1.96*sqrt(((power*(1-power))/2000))
power
power-ci
power+ci
ci<-1.96*sqrt(((power*(1-power))/2000))
power
power-ci
power+ci
out<-pvals_rho_0.05_taux_0.2_taue_0<=.05
power<-length(subset(out,out==TRUE))/length(out)
ci<-1.96*sqrt(((power*(1-power))/2000))
power
power-ci
power+ci
out<-pvals_rho_0.05_taux_0.6_taue_0<=.05
power<-length(subset(out,out==TRUE))/length(out)
ci<-1.96*sqrt(((power*(1-power))/2000))
power
power-ci
power+ci
out<-pvals_rho_0.05_taux_0_taue_0.2<=.05
power<-length(subset(out,out==TRUE))/length(out)
ci<-1.96*sqrt(((power*(1-power))/2000))
power
power-ci
power+ci
out<-pvals_rho_0.05_taux_0_taue_0.6<=.05
power<-length(subset(out,out==TRUE))/length(out)
ci<-1.96*sqrt(((power*(1-power))/2000))
power
power-ci
power+ci
out<-pvals_rho_0.05_taux_0_taue_0.2<=.05
power<-length(subset(out,out==TRUE))/length(out)
ci<-1.96*sqrt(((power*(1-power))/2000))
power
power-ci
power+ci
out<-pvals_rho_0.05_taux_0.2_taue_0.2<=.05
power<-length(subset(out,out==TRUE))/length(out)
ci<-1.96*sqrt(((power*(1-power))/2000))
power
power-ci
power+ci
out<-pvals_rho_0.05_taux_0.6_taue_0.2<=.05
power<-length(subset(out,out==TRUE))/length(out)
ci<-1.96*sqrt(((power*(1-power))/2000))
power
power-ci
power+ci
out<-pvals_rho_0.05_taux_0_taue_0.6<=.05
power<-length(subset(out,out==TRUE))/length(out)
ci<-1.96*sqrt(((power*(1-power))/2000))
power
power-ci
power+ci
out<-pvals_rho_0.05_taux_0.2_taue_0.6<=.05
power<-length(subset(out,out==TRUE))/length(out)
ci<-1.96*sqrt(((power*(1-power))/2000))
power
power-ci
power+ci
out<-pvals_rho_0.05_taux_0.6_taue_0.6<=.05
power<-length(subset(out,out==TRUE))/length(out)
ci<-1.96*sqrt(((power*(1-power))/2000))
power
power-ci
power+ci
out<-pvals_rho_0.1_taux_0_taue_0<=.05
power<-length(subset(out,out==TRUE))/length(out)
ci<-1.96*sqrt(((power*(1-power))/2000))
power
power-ci
power+ci
out<-pvals_rho_0.1_taux_0.2_taue_0<=.05
power<-length(subset(out,out==TRUE))/length(out)
ci<-1.96*sqrt(((power*(1-power))/2000))
power
power-ci
power+ci
out<-pvals_rho_0.1_taux_0.6_taue_0<=.05
power<-length(subset(out,out==TRUE))/length(out)
ci<-1.96*sqrt(((power*(1-power))/2000))
power
power-ci
power+ci
out<-pvals_rho_0.1_taux_0_taue_0.2<=.05
power<-length(subset(out,out==TRUE))/length(out)
ci<-1.96*sqrt(((power*(1-power))/2000))
power
power-ci
power+ci
out<-pvals_rho_0.1_taux_0.2_taue_0.2<=.05
power<-length(subset(out,out==TRUE))/length(out)
ci<-1.96*sqrt(((power*(1-power))/2000))
power
power-ci
power+ci
out<-pvals_rho_0.1_taux_0.6_taue_0.2<=.05
power<-length(subset(out,out==TRUE))/length(out)
ci<-1.96*sqrt(((power*(1-power))/2000))
power
power-ci
power+ci
out<-pvals_rho_0.1_taux_0_taue_0.6<=.05
power<-length(subset(out,out==TRUE))/length(out)
ci<-1.96*sqrt(((power*(1-power))/2000))
power
power-ci
power+ci
out<-pvals_rho_0.1_taux_0.2_taue_0.6<=.05
power<-length(subset(out,out==TRUE))/length(out)
ci<-1.96*sqrt(((power*(1-power))/2000))
power
power-ci
power+ci
out<-pvals_rho_0.1_taux_0.6_taue_0.6<=.05
power<-length(subset(out,out==TRUE))/length(out)
ci<-1.96*sqrt(((power*(1-power))/2000))
power
power-ci
power+ci
out<-pvals_rho_0.05_taux_0.6_taue_0.6<=.05
power<-length(subset(out,out==TRUE))/length(out)
ci<-1.96*sqrt(((power*(1-power))/2000))
power
power-ci
power+ci
plot(x,y)
2017-2009
8.5/20
5/27
23/40
2*.9+.4
2*.9+3*.7+.4
rbinom()
?rbinom
?rbern
x<-rbern(100000,1,prob=.01)
x<-rbinom(100000,1,prob=.01)
sum(x)
table(x)
library(medals)
datadir <- "~/Desktop/ISLES_2015/all_testing/"
subj <- c("05","06")
image.file<-vector(length = length(subj), mode = "list")
mask.file<-vector(length = length(subj), mode = "list")
y.file<-vector(length = length(subj), mode = "list")
for(i in 1:length(subj)){
imgs = file.path(datadir,
paste0(c("flair", "t1", "t2", "dwi"),
"TrimmedNormImg_Subject",
subj[i], ".nii.gz"))
image.file[[i]][[1]] <- imgs[1]
image.file[[i]][[2]] <- imgs[2]
image.file[[i]][[3]] <- imgs[3]
image.file[[i]][[4]] <- imgs[4]
mask.file[[i]] <- file.path(datadir, paste0("brainmask_Subject", subj[i], ".nii.gz"))
y.file[[i]] <- file.path(datadir,
paste0("ymask_Subject", subj[i], ".nii.gz")
)
}
?moment.cor.mat
cp<-moment.cor.mat(path.img.list = image.file,
path.mask.list = mask.file,
mpower = 2,
verbose = TRUE)
dim(cp$c.mat)
?pc.var
pc.var(mat=cp$c.mat,
n=cp$n)
pc.var(mat=cp$c.mat,n=cp$n)$var[1:8]
pc.var(mat=cp$c.mat,n=cp$n)$cum_pct[1:8]
cp$n
library(devtools)
install_github("jmmaronge/medals")
library(medals)
loadings <- get.loadings(cp$c.mat)
loadings
cp
pc.var(mat=cp$c.mat,n=cp$n)$cuml_pct[1:8]
pc.var(mat=cp$c.mat,n=cp$n)$cuml_pct[1:9]
scores <- make.score.img(
path.img.list = image.file,
path.mask.list = mask.file,
loads = loadings,
which.scores = 1:9
)
ortho2(scores[[1]][[2]])
library(neurobase)
ortho2(scores[[1]][[2]])
ortho2(scores[[1]][[1]])
ortho2(scores[[1]][[2]])
ortho2(scores[[1]][[3]])
ortho2(scores[[1]][[4]])
ortho2(scores[[1]][[5]])
ortho2(scores[[1]][[6]])
ortho2(scores[[1]][[]])
ortho2(scores[[1]][[]])
ortho2(scores[[1]][[7]])
ortho2(scores[[1]][[8]])
ortho2(scores[[1]][[9]])
fit1 <- get.model.fit(
score.img.list = scores,
path.mask.list = mask.file,
path.y.list = y.file,
# subj.id = subj,
verbose = TRUE
)
preds <- make.pred.img(
score.img.list = scores,
path.mask.list = mask.file,
fit = fit1,
# subj.id = subj
verbose = TRUE
)
ortho2(preds[[1]])
setwd("~/Documents/Repos/medals/")
library(roxygen2)
document()
document()
?readNIfTI2
?readnii
image.file
img<-readnii(image.file[[1]][[1]])
min(img)
mean(img)
median(img)
hist(img)
1250/2
