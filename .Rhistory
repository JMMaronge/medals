make.pred.imgs<-function(score.img.list,path.mask.list,path.y.list,subj.id){
require(fslr)
df.list <- vector(mode = "list", length =length(path.mask.list)
for(i in 1:length(path.mask.list)){
mask<- readnii(path.mask.list[[i]])
y.img<- readnii(path.y.list[[i]])
dat<-vector(mode = "list", length = length(score.img.list[[1]]))
for(j in 1:length(score.img.list[[1]])){
dat[[j]]<-score.img.list[[i]][[j]][mask==1]
}
dat<-do.call("cbind",dat)
subj.df<- data.frame(dat)
subj.df$id <-subj.id[i]
subj.df$y <- y.img[mask==1]
df.list[[i]] <- subj.df
}
dat<-do.call("rbind", df.list)
fit<-glm(data=dat,formula=y~.-id,family="binomial")
dat$pred<-predict(fit,type="response")
pred.img.list<-vector(mode = "list", length =length(subj.id))
for(i in 1:length(subj.id)){
vec<-dat$pred[dat$id==subj.id[i]]
mask<- readnii(mask.file.path[[i]])
pred.tmp<-remake_img(vec,mask,mask)
pred.img.list[[i]]<-pred.tmp
}
return(pred.img.list)
}
imaging.suff.stat<-function(path.img.list,path.mask.list,mpower){
require(ANTsR)
require(extrantsr)
require(fslr)
mean.mat<-matrix(NA,nrow=27*length(path.img.list[[1]])*mpower,ncol=length(path.img.list))
n.mat <-matrix(NA,nrow=27*length(path.img.list[[1]])*mpower,ncol=length(path.img.list))
SOS.mat<-matrix(NA,nrow=27*length(path.img.list[[1]])*mpower,ncol=length(path.img.list))
for(i in 1:length(path.img.list)){
print(paste0("Starting subject ",i))
img.mask<-readnii(path.mask.list[[i]])
ants.mask<-check_ants(img.mask)
img.list<-vector(mode = "list",length=length(path.img.list[[1]]))
dat.list<-vector(mode = "list",length=mpower)
for(j in 1:length(path.img.list[[1]])){
img.list[[j]]<-readnii(path.img.list[[i]][[j]])
ants.img<-check_ants(img.list[[j]])
for (k in 1:mpower){
dat.list[[k]][[j]]<-t(neighborhood(img=ants.img,
mask=ants.mask,
radius = rep(1,3),
boundary.condition="mean")[[1]]^k)
}
}
dat.list<-unlist(dat.list, recursive = FALSE)
x_i<-do.call("cbind",dat.list)
mean.mat[,i]<-colMeans(x_i)
n.mat[,i]<-rep(nrow(x_i), nrow(n.mat))
SOS.mat[,i]<-colSums(x_i^2)
}
pop.mean<-rowSums(mean.mat*n.mat)/rowSums(n.mat)
pop.sd<-sqrt((rowSums(SOS.mat)-(rowSums(mean.mat*n.mat)/rowSums(n.mat))^2*rowSums(n.mat))/(rowSums(n.mat)-1))
pop.stat<-list(length=2)
pop.stat$mean<-pop.mean
pop.stat$sd<-pop.sd
pop.stat$total.n<-rowSums(n.mat)[1]
return(pop.stat)
}
imaging.pca.mat<-function(path.img.list,path.mask.list,mean.vec,sd.vec){
final.x<-matrix(0,nrow = length(mean.vec),ncol = length(mean.vec))
for(i in 1:length(path.img.list)){
print(paste0("Starting subject ",i))
img.mask<-readnii(path.mask.list[[i]])
ants.mask<-check_ants(img.mask)
img.list<-vector(mode = "list",length=length(path.img.list[[1]]))
dat.list<-vector(mode = "list",length=(length(mean.vec)/27/length(path.img.list[[1]])))
for(j in 1:length(path.img.list[[1]])){
img.list[[j]]<-readnii(path.img.list[[i]][[j]])
ants.img<-check_ants(img.list[[j]])
for(k in 1:(length(mean.vec)/27/length(path.img.list[[1]]))){
dat.list[[k]][[j]]<-t(neighborhood(img=ants.img,
mask=ants.mask,
radius = rep(1,3),
boundary.condition="mean")[[1]]^k)
}
}
dat.list<-unlist(dat.list, recursive = FALSE)
x_i<-do.call("cbind",dat.list)
temp.x<-sweep(x_i,2,mean.vec,"-")
temp.x<-sweep(temp.x,2,sd.vec,"/")
final.x<-final.x+crossprod(temp.x)
}
return(final.x)
}
make.pred.imgs<-function(score.img.list,path.mask.list,path.y.list,subj.id){
require(fslr)
df.list <- vector(mode = "list", length =length(path.mask.list))
for(i in 1:length(path.mask.list)){
mask<- readnii(path.mask.list[[i]])
y.img<- readnii(path.y.list[[i]])
dat<-vector(mode = "list", length = length(score.img.list[[1]]))
for(j in 1:length(score.img.list[[1]])){
dat[[j]]<-score.img.list[[i]][[j]][mask==1]
}
dat<-do.call("cbind",dat)
subj.df<- data.frame(dat)
subj.df$id <-subj.id[i]
subj.df$y <- y.img[mask==1]
df.list[[i]] <- subj.df
}
dat<-do.call("rbind", df.list)
fit<-glm(data=dat,formula=y~.-id,family="binomial")
dat$pred<-predict(fit,type="response")
pred.img.list<-vector(mode = "list", length =length(subj.id))
for(i in 1:length(subj.id)){
vec<-dat$pred[dat$id==subj.id[i]]
mask<- readnii(mask.file.path[[i]])
pred.tmp<-remake_img(vec,mask,mask)
pred.img.list[[i]]<-pred.tmp
}
return(pred.img.list)
}
setwd("~/Documents/NeuroImaging/Segmentation/ISLES/Lesion_Intensity/medals/")
document()
library(roxygen2)
document()
library("devtools")
document()
install_github("jmmaronge/medals")
