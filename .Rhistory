list("~/Desktop/images_ISLES2015/flairTrimmedNormImg_Subject06.nii.gz","~/Desktop/images_ISLES2015/t1TrimmedNormImg_Subject06.nii.gz"))
path.mask<-list("~/Desktop/images_ISLES2015/brainmask_Subject05.nii.gz","~/Desktop/images_ISLES2015/brainmask_Subject06.nii.gz")
system.time({
test.stat<- imaging.suff.stat(path.img,path.mask)
})
system.time({
imaging.make.pca.mat(path.img,path.mask,test.stat$mean,test.stat$sd)
})
system.time({
cov.mat<-imaging.make.pca.mat(path.img,path.mask,test.stat$mean,test.stat$sd)
})
local.moment.scores<-function(image.list, mask.list, num.seq){
#image list should be n (one for each subject) sublists of MRI sequences,
#each sublist should include every MR sequence
require(ANTsR)
require(extrantsr)
require(fslr)
require(data.table)
subj.list<-vector(mode = "list", length = length(image.list))
for(j in 1:length(subj.list)){
mask<-mask.list[[j]]
ants.mask<-check_ants(mask)
neigh.list<-vector(mode = "list", length = length(num.seq))
for(i in 1:num.seq){
print(paste0("Subject",j,"Image",i))
img<-image.list[[j]][[i]]
ants.img<-check_ants(img)
neigh.list[[i]]<-t(neighborhood(img  = ants.img,
mask = ants.mask,
radius = c(1,1,1),
boundary.condition = "image")[[1]])
}
subj.list[[j]]<-data.frame(do.call("cbind", neigh.list))
}
print("rbinding subject data")
all.subj.dat<-rbindlist(subj.list)
scaled<-scale(all.subj.dat)
cov<-matrix(crossprod(scaled))
return(cov)}
load("~/test_data_JM.RData")
norm.img.list<-norm.img.list[1:2]
mask.list<-mask.list[1:2]
test<-list(list(norm.img.list[[1]][[3]],norm.img.list[[1]][[1]]),list(norm.img.list[[2]][[3]],norm.img.list[[2]][[1]]))
ortho2(test[[1]][[1]])
ortho2(test[[1]][[2]])
ortho2(test[[2]][[2]])
ortho2(test[[3]][[2]])
ortho2(test[[3]][[3]])
load("~/test_data_JM.RData")
norm.img.list<-norm.img.list[1:2]
mask.list<-mask.list[1:2]
norm.img.list<-list(list(norm.img.list[[1]][[3]],norm.img.list[[1]][[1]]),list(norm.img.list[[2]][[3]],norm.img.list[[2]][[1]]))
rm(test)
system.time({
cov2<-local.moment.scores(norm.img.list,mask.list,2)
})
str(cov2)
?scale
local.moment.scores<-function(image.list, mask.list, num.seq){
#image list should be n (one for each subject) sublists of MRI sequences,
#each sublist should include every MR sequence
require(ANTsR)
require(extrantsr)
require(fslr)
require(data.table)
subj.list<-vector(mode = "list", length = length(image.list))
for(j in 1:length(subj.list)){
mask<-mask.list[[j]]
ants.mask<-check_ants(mask)
neigh.list<-vector(mode = "list", length = length(num.seq))
for(i in 1:num.seq){
print(paste0("Subject",j,"Image",i))
img<-image.list[[j]][[i]]
ants.img<-check_ants(img)
neigh.list[[i]]<-t(neighborhood(img  = ants.img,
mask = ants.mask,
radius = c(1,1,1),
boundary.condition = "image")[[1]])
}
subj.list[[j]]<-data.frame(do.call("cbind", neigh.list))
}
print("rbinding subject data")
all.subj.dat<-rbindlist(subj.list)
scaled<-scale(all.subj.dat)
cov<-crossprod(scaled)
return(cov)}
cov2<-local.moment.scores(norm.img.list,mask.list,2)
cov.mat==cov2
local.moment.scores<-function(image.list, mask.list, num.seq){
#image list should be n (one for each subject) sublists of MRI sequences,
#each sublist should include every MR sequence
require(ANTsR)
require(extrantsr)
require(fslr)
require(data.table)
subj.list<-vector(mode = "list", length = length(image.list))
for(j in 1:length(subj.list)){
mask<-mask.list[[j]]
ants.mask<-check_ants(mask)
neigh.list<-vector(mode = "list", length = length(num.seq))
for(i in 1:num.seq){
print(paste0("Subject",j,"Image",i))
img<-image.list[[j]][[i]]
ants.img<-check_ants(img)
neigh.list[[i]]<-t(neighborhood(img  = ants.img,
mask = ants.mask,
radius = c(1,1,1),
boundary.condition = "image")[[1]])
}
subj.list[[j]]<-data.frame(do.call("cbind", neigh.list))
}
print("rbinding subject data")
all.subj.dat<-rbindlist(subj.list)
scaled<-scale(all.subj.dat)
return(scaled)}
cov2<-local.moment.scores(norm.img.list,mask.list,2)
str(cov2)
test.stat$mean
test.stat$sd
attr(cov2)
?attr
attr(cov2,"scaled:center")
-3.240528e-02
local.moment.scores<-function(image.list, mask.list, num.seq){
#image list should be n (one for each subject) sublists of MRI sequences,
#each sublist should include every MR sequence
require(ANTsR)
require(extrantsr)
require(fslr)
require(data.table)
subj.list<-vector(mode = "list", length = length(image.list))
for(j in 1:length(subj.list)){
mask<-mask.list[[j]]
ants.mask<-check_ants(mask)
neigh.list<-vector(mode = "list", length = length(num.seq))
for(i in 1:num.seq){
print(paste0("Subject",j,"Image",i))
img<-image.list[[j]][[i]]
ants.img<-check_ants(img)
neigh.list[[i]]<-t(neighborhood(img  = ants.img,
mask = ants.mask,
radius = c(1,1,1),
boundary.condition = "image")[[1]])
}
subj.list[[j]]<-data.frame(do.call("cbind", neigh.list))
}
print("rbinding subject data")
all.subj.dat<-rbindlist(subj.list)
return(all.subj.dat)}
cov2<-local.moment.scores(norm.img.list,mask.list,2)
str(cov2)
mean(cov2$X1)
test.stat[1]
test.stat[[2]][1]
test.stat[[2]]
path.img.list<-list(list("~/Desktop/images_ISLES2015/flairTrimmedNormImg_Subject05.nii.gz","~/Desktop/images_ISLES2015/t1TrimmedNormImg_Subject05.nii.gz"),
list("~/Desktop/images_ISLES2015/flairTrimmedNormImg_Subject06.nii.gz","~/Desktop/images_ISLES2015/t1TrimmedNormImg_Subject06.nii.gz"))
path.mask<-list("~/Desktop/images_ISLES2015/brainmask_Subject05.nii.gz","~/Desktop/images_ISLES2015/brainmask_Subject06.nii.gz")
mean.mat<-matrix(NA,nrow=27*length(path.img.list[[1]]),ncol=length(path.img.list))
n.mat <-matrix(NA,nrow=27*length(path.img.list[[1]]),ncol=length(path.img.list))
SOS.mat<-matrix(NA,nrow=27*length(path.img.list[[1]]),ncol=length(path.img.list))
for(i in 1:length(path.img.list)){
img.mask<-readnii(path.mask.list[[i]])
ants.mask<-check_ants(img.mask)
img.list<-vector(mode = "list",length=length(path.img.list[[1]]))
dat.list<-vector(mode = "list",length=length(path.img.list[[1]]))
for(j in 1:length(path.img.list[[1]])){
img.list[[j]]<-readnii(path.img.list[[i]][[j]])
ants.img<-check_ants(img.list[[j]])
dat.list[[j]]<-t(neighborhood(img=ants.img,
mask=ants.mask,
radius = rep(1,3),
boundary.condition="mean")[[1]])
}
x_i<-do.call("cbind",dat.list)
mean.mat[,i]<-colMeans(x_i)
n.mat[,i]<-rep(nrow(x_i), nrow(n.mat))
SOS.mat[,i]<-colSums(x_i^2)
}
path.img.list<-list(list("~/Desktop/images_ISLES2015/flairTrimmedNormImg_Subject05.nii.gz","~/Desktop/images_ISLES2015/t1TrimmedNormImg_Subject05.nii.gz"),
list("~/Desktop/images_ISLES2015/flairTrimmedNormImg_Subject06.nii.gz","~/Desktop/images_ISLES2015/t1TrimmedNormImg_Subject06.nii.gz"))
path.mask.list<-list("~/Desktop/images_ISLES2015/brainmask_Subject05.nii.gz","~/Desktop/images_ISLES2015/brainmask_Subject06.nii.gz")
mean.mat<-matrix(NA,nrow=27*length(path.img.list[[1]]),ncol=length(path.img.list))
n.mat <-matrix(NA,nrow=27*length(path.img.list[[1]]),ncol=length(path.img.list))
SOS.mat<-matrix(NA,nrow=27*length(path.img.list[[1]]),ncol=length(path.img.list))
for(i in 1:length(path.img.list)){
img.mask<-readnii(path.mask.list[[i]])
ants.mask<-check_ants(img.mask)
img.list<-vector(mode = "list",length=length(path.img.list[[1]]))
dat.list<-vector(mode = "list",length=length(path.img.list[[1]]))
for(j in 1:length(path.img.list[[1]])){
img.list[[j]]<-readnii(path.img.list[[i]][[j]])
ants.img<-check_ants(img.list[[j]])
dat.list[[j]]<-t(neighborhood(img=ants.img,
mask=ants.mask,
radius = rep(1,3),
boundary.condition="mean")[[1]])
}
x_i<-do.call("cbind",dat.list)
mean.mat[,i]<-colMeans(x_i)
n.mat[,i]<-rep(nrow(x_i), nrow(n.mat))
SOS.mat[,i]<-colSums(x_i^2)
}
mean.mat
n.mat
(-0.09524413*1340540+0.034902852*1251528)/(1340540+1251528)
-3.240528e-02
1340540+1251528
sum(cov2[1:1340540,1])/1340540
(cov2[1:1340540,1])
cov2[1:1340540,1]
cov2
head(cov2)
dim(x_i)
head(x_i)
local.moment.scores<-function(image.list, mask.list, num.seq){
#image list should be n (one for each subject) sublists of MRI sequences,
#each sublist should include every MR sequence
require(ANTsR)
require(extrantsr)
require(fslr)
require(data.table)
subj.list<-vector(mode = "list", length = length(image.list))
for(j in 1:length(subj.list)){
mask<-mask.list[[j]]
ants.mask<-check_ants(mask)
neigh.list<-vector(mode = "list", length = length(num.seq))
for(i in 1:num.seq){
print(paste0("Subject",j,"Image",i))
img<-image.list[[j]][[i]]
ants.img<-check_ants(img)
neigh.list[[i]]<-t(neighborhood(img  = ants.img,
mask = ants.mask,
radius = c(1,1,1),
boundary.condition = "image")[[1]])
}
subj.list[[j]]<-do.call("cbind", neigh.list)
}
print("rbinding subject data")
all.subj.dat<-rbindlist(subj.list)
return(all.subj.dat)}
ortho2(norm.img.list[[1]][[1]])
cov2<-local.moment.scores(norm.img.list,mask.list,2)
local.moment.scores<-function(image.list, mask.list, num.seq){
#image list should be n (one for each subject) sublists of MRI sequences,
#each sublist should include every MR sequence
require(ANTsR)
require(extrantsr)
require(fslr)
require(data.table)
subj.list<-vector(mode = "list", length = length(image.list))
for(j in 1:length(subj.list)){
mask<-mask.list[[j]]
ants.mask<-check_ants(mask)
neigh.list<-vector(mode = "list", length = length(num.seq))
for(i in 1:num.seq){
print(paste0("Subject",j,"Image",i))
img<-image.list[[j]][[i]]
ants.img<-check_ants(img)
neigh.list[[i]]<-t(neighborhood(img  = ants.img,
mask = ants.mask,
radius = c(1,1,1),
boundary.condition = "image")[[1]])
}
subj.list[[j]]<-do.call("cbind", neigh.list)
}
print("rbinding subject data")
all.subj.dat<-do.call("rbind",subj.list)
return(all.subj.dat)}
cov2<-local.moment.scores(norm.img.list,mask.list,2)
head(cov2)
local.moment.scores<-function(image.list, mask.list, num.seq){
#image list should be n (one for each subject) sublists of MRI sequences,
#each sublist should include every MR sequence
require(ANTsR)
require(extrantsr)
require(fslr)
require(data.table)
subj.list<-vector(mode = "list", length = length(image.list))
for(j in 1:length(subj.list)){
mask<-mask.list[[j]]
ants.mask<-check_ants(mask)
neigh.list<-vector(mode = "list", length = length(num.seq))
for(i in 1:num.seq){
print(paste0("Subject",j,"Image",i))
img<-image.list[[j]][[i]]
ants.img<-check_ants(img)
neigh.list[[i]]<-t(neighborhood(img  = ants.img,
mask = ants.mask,
radius = c(1,1,1),
boundary.condition = "mean")[[1]])
}
subj.list[[j]]<-data.frame(do.call("cbind", neigh.list))
}
print("rbinding subject data")
all.subj.dat<-rbindlist(subj.list)
scaled<-scale(all.subj.dat)
cov<-crossprod(scaled)
return(cov)}
cov2<-local.moment.scores(norm.img.list,mask.list,2)
all.equal(cov.mat,cov2)
cov.mat==cov2
str(cov.mat)
str(cov2)
cov3<-as.matrix(cov2)
str(cov3)
unname(cov3)
cov3<-unname(cov3)
str(cov3)
all.equal(cov.matr,cov3)
all.equal(cov.mat,cov3)
library(fslr)
??img
mat<-matrix(rnorm(100),nrow = 10)
mat[1,c(1,4,5)]
?remake_img
remake_img
27*4*4
?svd
mat<-matrix(rnorm(100),nrow=10)
prcomp(mat)
test<-crossprod(mat)
svd(test)$d
(23.44018)^1/4
(23.44018)^(1/4)
summary(prcomp(mat))
svd(test)$d
sqrt(svd(test)$d[1])
sqrt(sqrt(svd(test)$d[1]))
sqrt(sqrt(sqrt(svd(test)$d[1])))
svd(mat)$d
?prcomp
prcomp(mat,center = T,scale. = T)
summary(prcomp(mat,center = T,scale. = T))
svd(scale(mat))$v
svd(scale(mat))$d
sqrt(svd(scale(mat))$d[1])
summary(prcomp(mat,center = T,scale. = T))
sqrt(svd(scale(mat))$d[1])
sqrt(sqrt(svd(scale(mat))$d[1]))
svd(scale(mat))$d
?scale
mat<-matrix(rnorm(110),nrow = 11)
mat<-scale(matrix(rnorm(110),nrow = 11))
summary(prcomp(mat, center=TRUE, scale. = TRUE))
summary(prcomp(crossprod(mat), center=TRUE, scale. = TRUE))
sqrt(2.1135)
summary(prcomp(crossprod(mat)))
sqrt(9.5665)
sqrt(sqrt(9.5665))
sqrt(sqrt(sqrt(9.5665)))
summary(prcomp(mat, center = FALSE))
summary(prcomp(mat))
summary(prcomp(crossprod(mat), center=TRUE, scale. = TRUE))
summary(prcomp(mat, center=TRUE, scale. = TRUE))
svd(mat)$d
eigen(mat)$values
eigen(crossprod(mat))$values
prcomp
sqrt(eigen(crossprod(mat))$values)
prcomp
prcomp(mat,center = F)$sdevs
?prcomp
prcomp(mat,center = F)$sdev
prcomp(mat,center = F)$sdev^2
prcomp(mat,center = F)$sdev^4
prcomp(mat,center = F)$sdev^2
mat<-matrix(rnorm(100000),nrow =20000 )
mat<-scale(matrix((rnorm(100000),nrow =20000))
mat<-scale(matrix(rnorm(100000),nrow =20000))
mat<-scale(matrix(rnorm(100),nrow =20))
prcomp(mat,center = FALSE)$sdev^2
svd(mat)$d
sqrt(svd(mat)$d)
sqrt(sqrt(svd(mat)$d))
svd(crossprod(mat))$d
mat<-matrix(rnorm(100),nrow =20)
prcomp(mat,center = F,scale. = F)$sdev
svd(mat)$d
?svd
mat<-matrix(rnorm(1000),nrow=200)
prcomp(may,center = TRUE,scale. = TRUE)$sdev
prcomp(mat,center = TRUE,scale. = TRUE)$sdev
prcomp(mat,center = TRUE,scale. = TRUE)$sdev^2
svd(scale(mat,center = TRUE,scale = TRUE))$d
sqrt(svd(scale(mat,center = TRUE,scale = TRUE))$d)
sqrt(sqrt(svd(scale(mat,center = TRUE,scale = TRUE))$d))
sqrt(sqrt(sqrt(svd(scale(mat,center = TRUE,scale = TRUE))$d)))
sqrt(sqrt(sqrt(sqrt(svd(scale(mat,center = TRUE,scale = TRUE))$d))))
svd(crossprod(scale(mat)))
prcomp(may,center = TRUE,scale. = TRUE)
prcomp(mat,center = TRUE,scale. = TRUE)
svd(scale(mat))$v
svd(scale(mat))$u
svd(scale(mat))$d
svd(scale(mat))$d[1]/cumsum(svd(scale(mat))$d)
svd(scale(mat))$d[1]/sum(svd(scale(mat))$d)
summary(prcomp(mat,center = TRUE,scale. = TRUE))
eigen(scale(mat))$values
eigen(crossprod(scale(mat)))$values
(eigen(crossprod(scale(mat)))$values[1])^(1/4)
(eigen(crossprod(scale(mat)))$values[1])^(1/8)
(eigen(crossprod(scale(mat)))$values[1])^(1/16)
(eigen(crossprod(scale(mat)))$values[1])^(1/32)
prcomp(mat,center=T scale. = T)$sdev^2*(199/200)
prcomp(mat,center=T, scale. = T)$sdev^2*(199/200)
svd(scale(mat))$d
sqrt(svd(scale(mat))$d)
(svd(scale(mat))$d)^(1/4)
(svd(scale(mat))$d)^(1/8)
(svd(scale(mat))$d)^(1/16)
(svd(scale(mat))$d)^(1/32)
prcomp(mat,center=T, scale. = T)$sdev^2/200
prcomp(mat,center=T, scale. = T)$sdev^2/199
prcomp(mat,center=T, scale. = T)$sdev^2
svd(scale(mat))$d^2/199
prcomp(mat,center=T, scale. = T)$sdev^2*199/200
svd(scale(mat))$d^2/200
summary(prcomp(mat,center=T, scale. = T)$sdev^2)
summary(prcomp(mat,center=T, scale. = T))
svd(scale(mat))$d^2/199/sum(svd(scale(mat))$d^2/199)
cumsum(svd(scale(mat))$d^2/199)/sum(svd(scale(mat))$d^2/199)
install.packages("rmarkdown")
library(rmarkdown)
c(rnorm(9,2,10))
test<-c(rnorm(9,2,10))
m<-mean(test)
m
test-m
mean(test-m)
test2<-c(test,test[1])
mean(test2)
test[1]
library(medals)
?imaging.suff.stat
path.img<-list(list("~/Desktop/images_ISLES2015/flairTrimmedNormImg_Subject05.nii.gz","~/Desktop/images_ISLES2015/t1TrimmedNormImg_Subject05.nii.gz"),
list("~/Desktop/images_ISLES2015/flairTrimmedNormImg_Subject06.nii.gz","~/Desktop/images_ISLES2015/t1TrimmedNormImg_Subject06.nii.gz"))
path.mask<-list("~/Desktop/images_ISLES2015/brainmask_Subject05.nii.gz","~/Desktop/images_ISLES2015/brainmask_Subject06.nii.gz")
suff<-imaging.suff.stat(path.img,path.mask,1)
path.img<-list(list("~/Desktop/images_ISLES2015/training/flairTrimmedNormImg_Subject05.nii.gz","~/Desktop/images_ISLES2015/t1TrimmedNormImg_Subject05.nii.gz"),
list("~/Desktop/images_ISLES2015/training/flairTrimmedNormImg_Subject06.nii.gz","~/Desktop/images_ISLES2015/t1TrimmedNormImg_Subject06.nii.gz"))
path.mask<-list("~/Desktop/images_ISLES2015/training/brainmask_Subject05.nii.gz","~/Desktop/images_ISLES2015/training/brainmask_Subject06.nii.gz")
suff<-imaging.suff.stat(path.img,path.mask,1)
setwd("~/")
suff<-imaging.suff.stat(path.img,path.mask,1)
path.img<-list(list("~/Desktop/images_ISLES2015/training/flairTrimmedNormImg_Subject05.nii.gz","~/Desktop/images_ISLES2015/training/t1TrimmedNormImg_Subject05.nii.gz"),
list("~/Desktop/images_ISLES2015/training/flairTrimmedNormImg_Subject06.nii.gz","~/Desktop/images_ISLES2015/training/t1TrimmedNormImg_Subject06.nii.gz"))
path.mask<-list("~/Desktop/images_ISLES2015/training/brainmask_Subject05.nii.gz","~/Desktop/images_ISLES2015/training/brainmask_Subject06.nii.gz")
suff<-imaging.suff.stat(path.img,path.mask,1)
suff
?imaging.cp
install_github("jmmaronge/medals")
libray(devtools)
library(devtools)
install_github("jmmaronge/medals")
setwd("~/Documents/Computing/1st_R_package/jmm.funcs/")
document()
setwd("~/Documents/Computing/1st_R_package/jmm.funcs/")
setwd("~/Documents/NeuroImaging/Segmentation/ISLES/Lesion_Intensity/medals/")
document()
setwd("~")
install_github("jmmaronge/medals")
library(medals)
?imaging.cp.mat
?imaging.cp.mat
?imaging.cp.mat
library(devtools)
install_github("jmmaronge/medals")
library(medals)
?make.pred.img
path.img<-list(list("~/Desktop/images_ISLES2015/training/flairTrimmedNormImg_Subject05.nii.gz","~/Desktop/images_ISLES2015/training/t1TrimmedNormImg_Subject05.nii.gz"),
list("~/Desktop/images_ISLES2015/training/flairTrimmedNormImg_Subject06.nii.gz","~/Desktop/images_ISLES2015/training/t1TrimmedNormImg_Subject06.nii.gz"))
path.mask<-list("~/Desktop/images_ISLES2015/training/brainmask_Subject05.nii.gz","~/Desktop/images_ISLES2015/training/brainmask_Subject06.nii.gz")
path.y<-list("~/Desktop/images_ISLES2015/training/ymask_Subject05.nii.gz","~/Desktop/images_ISLES2015/training/ymask_Subject06.nii.gz")
>imaging.suff.stat()
?imaging.suff.stat
suff<-imaging.suff.stat(path.img,path.mask,1)
?imaging.cp.mat
cp<-imaging.cp.mat(path.img,path.mask,suff$mean,suff$sd)
?pc.var
vari<-pc.var(cp,suff$total.n)
library(roxygen2)
library("devtools")
setwd("~/Documents/NeuroImaging/Segmentation/ISLES/Lesion_Intensity/medals/")
document()
detach("package:medals",unload = TRUE)
install_github("jmmaronge/medals")
install_github("jmmaronge/medals")
library(medals)
setwd("~/")
vari<-pc.var(cp,suff$total.n)
vari
vari$cumvar
?make.score.img
detach("package:medals",unload = TRUE)
library(medals)
?make.score.img
library(medals)
?make.score.img
scores<-make.score.img(path.img,path.mask,cp,1:3)
scores<-medals::make.score.img(path.img,path.mask,cp,1:3)
?make.score.img
library(medals)
library("devtools")
library(roxygen2)
install_github("jmmaronge/medals")
install_github("jmmaronge/medals")
install_github("jmmaronge/medals")
install_github("jmmaronge/medals")
install_github("jmmaronge/medals")
setwd("~/Documents/NeuroImaging/Segmentation/ISLES/Lesion_Intensity/medals/")
document()
