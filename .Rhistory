cov2<-local.moment.scores(norm.img.list,mask.list,2)
head(cov2)
local.moment.scores<-function(image.list, mask.list, num.seq){
#image list should be n (one for each subject) sublists of MRI sequences,
#each sublist should include every MR sequence
require(ANTsR)
require(extrantsr)
require(fslr)
require(data.table)
subj.list<-vector(mode = "list", length = length(image.list))
for(j in 1:length(subj.list)){
mask<-mask.list[[j]]
ants.mask<-check_ants(mask)
neigh.list<-vector(mode = "list", length = length(num.seq))
for(i in 1:num.seq){
print(paste0("Subject",j,"Image",i))
img<-image.list[[j]][[i]]
ants.img<-check_ants(img)
neigh.list[[i]]<-t(neighborhood(img  = ants.img,
mask = ants.mask,
radius = c(1,1,1),
boundary.condition = "mean")[[1]])
}
subj.list[[j]]<-data.frame(do.call("cbind", neigh.list))
}
print("rbinding subject data")
all.subj.dat<-rbindlist(subj.list)
scaled<-scale(all.subj.dat)
cov<-crossprod(scaled)
return(cov)}
cov2<-local.moment.scores(norm.img.list,mask.list,2)
all.equal(cov.mat,cov2)
cov.mat==cov2
str(cov.mat)
str(cov2)
cov3<-as.matrix(cov2)
str(cov3)
unname(cov3)
cov3<-unname(cov3)
str(cov3)
all.equal(cov.matr,cov3)
all.equal(cov.mat,cov3)
library(fslr)
??img
mat<-matrix(rnorm(100),nrow = 10)
mat[1,c(1,4,5)]
?remake_img
remake_img
27*4*4
?svd
mat<-matrix(rnorm(100),nrow=10)
prcomp(mat)
test<-crossprod(mat)
svd(test)$d
(23.44018)^1/4
(23.44018)^(1/4)
summary(prcomp(mat))
svd(test)$d
sqrt(svd(test)$d[1])
sqrt(sqrt(svd(test)$d[1]))
sqrt(sqrt(sqrt(svd(test)$d[1])))
svd(mat)$d
?prcomp
prcomp(mat,center = T,scale. = T)
summary(prcomp(mat,center = T,scale. = T))
svd(scale(mat))$v
svd(scale(mat))$d
sqrt(svd(scale(mat))$d[1])
summary(prcomp(mat,center = T,scale. = T))
sqrt(svd(scale(mat))$d[1])
sqrt(sqrt(svd(scale(mat))$d[1]))
svd(scale(mat))$d
?scale
mat<-matrix(rnorm(110),nrow = 11)
mat<-scale(matrix(rnorm(110),nrow = 11))
summary(prcomp(mat, center=TRUE, scale. = TRUE))
summary(prcomp(crossprod(mat), center=TRUE, scale. = TRUE))
sqrt(2.1135)
summary(prcomp(crossprod(mat)))
sqrt(9.5665)
sqrt(sqrt(9.5665))
sqrt(sqrt(sqrt(9.5665)))
summary(prcomp(mat, center = FALSE))
summary(prcomp(mat))
summary(prcomp(crossprod(mat), center=TRUE, scale. = TRUE))
summary(prcomp(mat, center=TRUE, scale. = TRUE))
svd(mat)$d
eigen(mat)$values
eigen(crossprod(mat))$values
prcomp
sqrt(eigen(crossprod(mat))$values)
prcomp
prcomp(mat,center = F)$sdevs
?prcomp
prcomp(mat,center = F)$sdev
prcomp(mat,center = F)$sdev^2
prcomp(mat,center = F)$sdev^4
prcomp(mat,center = F)$sdev^2
mat<-matrix(rnorm(100000),nrow =20000 )
mat<-scale(matrix((rnorm(100000),nrow =20000))
mat<-scale(matrix(rnorm(100000),nrow =20000))
mat<-scale(matrix(rnorm(100),nrow =20))
prcomp(mat,center = FALSE)$sdev^2
svd(mat)$d
sqrt(svd(mat)$d)
sqrt(sqrt(svd(mat)$d))
svd(crossprod(mat))$d
mat<-matrix(rnorm(100),nrow =20)
prcomp(mat,center = F,scale. = F)$sdev
svd(mat)$d
?svd
mat<-matrix(rnorm(1000),nrow=200)
prcomp(may,center = TRUE,scale. = TRUE)$sdev
prcomp(mat,center = TRUE,scale. = TRUE)$sdev
prcomp(mat,center = TRUE,scale. = TRUE)$sdev^2
svd(scale(mat,center = TRUE,scale = TRUE))$d
sqrt(svd(scale(mat,center = TRUE,scale = TRUE))$d)
sqrt(sqrt(svd(scale(mat,center = TRUE,scale = TRUE))$d))
sqrt(sqrt(sqrt(svd(scale(mat,center = TRUE,scale = TRUE))$d)))
sqrt(sqrt(sqrt(sqrt(svd(scale(mat,center = TRUE,scale = TRUE))$d))))
svd(crossprod(scale(mat)))
prcomp(may,center = TRUE,scale. = TRUE)
prcomp(mat,center = TRUE,scale. = TRUE)
svd(scale(mat))$v
svd(scale(mat))$u
svd(scale(mat))$d
svd(scale(mat))$d[1]/cumsum(svd(scale(mat))$d)
svd(scale(mat))$d[1]/sum(svd(scale(mat))$d)
summary(prcomp(mat,center = TRUE,scale. = TRUE))
eigen(scale(mat))$values
eigen(crossprod(scale(mat)))$values
(eigen(crossprod(scale(mat)))$values[1])^(1/4)
(eigen(crossprod(scale(mat)))$values[1])^(1/8)
(eigen(crossprod(scale(mat)))$values[1])^(1/16)
(eigen(crossprod(scale(mat)))$values[1])^(1/32)
prcomp(mat,center=T scale. = T)$sdev^2*(199/200)
prcomp(mat,center=T, scale. = T)$sdev^2*(199/200)
svd(scale(mat))$d
sqrt(svd(scale(mat))$d)
(svd(scale(mat))$d)^(1/4)
(svd(scale(mat))$d)^(1/8)
(svd(scale(mat))$d)^(1/16)
(svd(scale(mat))$d)^(1/32)
prcomp(mat,center=T, scale. = T)$sdev^2/200
prcomp(mat,center=T, scale. = T)$sdev^2/199
prcomp(mat,center=T, scale. = T)$sdev^2
svd(scale(mat))$d^2/199
prcomp(mat,center=T, scale. = T)$sdev^2*199/200
svd(scale(mat))$d^2/200
summary(prcomp(mat,center=T, scale. = T)$sdev^2)
summary(prcomp(mat,center=T, scale. = T))
svd(scale(mat))$d^2/199/sum(svd(scale(mat))$d^2/199)
cumsum(svd(scale(mat))$d^2/199)/sum(svd(scale(mat))$d^2/199)
install.packages("rmarkdown")
library(rmarkdown)
c(rnorm(9,2,10))
test<-c(rnorm(9,2,10))
m<-mean(test)
m
test-m
mean(test-m)
test2<-c(test,test[1])
mean(test2)
test[1]
library(medals)
?imaging.suff.stat
path.img<-list(list("~/Desktop/images_ISLES2015/flairTrimmedNormImg_Subject05.nii.gz","~/Desktop/images_ISLES2015/t1TrimmedNormImg_Subject05.nii.gz"),
list("~/Desktop/images_ISLES2015/flairTrimmedNormImg_Subject06.nii.gz","~/Desktop/images_ISLES2015/t1TrimmedNormImg_Subject06.nii.gz"))
path.mask<-list("~/Desktop/images_ISLES2015/brainmask_Subject05.nii.gz","~/Desktop/images_ISLES2015/brainmask_Subject06.nii.gz")
suff<-imaging.suff.stat(path.img,path.mask,1)
path.img<-list(list("~/Desktop/images_ISLES2015/training/flairTrimmedNormImg_Subject05.nii.gz","~/Desktop/images_ISLES2015/t1TrimmedNormImg_Subject05.nii.gz"),
list("~/Desktop/images_ISLES2015/training/flairTrimmedNormImg_Subject06.nii.gz","~/Desktop/images_ISLES2015/t1TrimmedNormImg_Subject06.nii.gz"))
path.mask<-list("~/Desktop/images_ISLES2015/training/brainmask_Subject05.nii.gz","~/Desktop/images_ISLES2015/training/brainmask_Subject06.nii.gz")
suff<-imaging.suff.stat(path.img,path.mask,1)
setwd("~/")
suff<-imaging.suff.stat(path.img,path.mask,1)
path.img<-list(list("~/Desktop/images_ISLES2015/training/flairTrimmedNormImg_Subject05.nii.gz","~/Desktop/images_ISLES2015/training/t1TrimmedNormImg_Subject05.nii.gz"),
list("~/Desktop/images_ISLES2015/training/flairTrimmedNormImg_Subject06.nii.gz","~/Desktop/images_ISLES2015/training/t1TrimmedNormImg_Subject06.nii.gz"))
path.mask<-list("~/Desktop/images_ISLES2015/training/brainmask_Subject05.nii.gz","~/Desktop/images_ISLES2015/training/brainmask_Subject06.nii.gz")
suff<-imaging.suff.stat(path.img,path.mask,1)
suff
?imaging.cp
install_github("jmmaronge/medals")
libray(devtools)
library(devtools)
install_github("jmmaronge/medals")
setwd("~/Documents/Computing/1st_R_package/jmm.funcs/")
document()
setwd("~/Documents/Computing/1st_R_package/jmm.funcs/")
setwd("~/Documents/NeuroImaging/Segmentation/ISLES/Lesion_Intensity/medals/")
document()
setwd("~")
install_github("jmmaronge/medals")
library(medals)
?imaging.cp.mat
?imaging.cp.mat
?imaging.cp.mat
library(devtools)
install_github("jmmaronge/medals")
library(medals)
?make.pred.img
path.img<-list(list("~/Desktop/images_ISLES2015/training/flairTrimmedNormImg_Subject05.nii.gz","~/Desktop/images_ISLES2015/training/t1TrimmedNormImg_Subject05.nii.gz"),
list("~/Desktop/images_ISLES2015/training/flairTrimmedNormImg_Subject06.nii.gz","~/Desktop/images_ISLES2015/training/t1TrimmedNormImg_Subject06.nii.gz"))
path.mask<-list("~/Desktop/images_ISLES2015/training/brainmask_Subject05.nii.gz","~/Desktop/images_ISLES2015/training/brainmask_Subject06.nii.gz")
path.y<-list("~/Desktop/images_ISLES2015/training/ymask_Subject05.nii.gz","~/Desktop/images_ISLES2015/training/ymask_Subject06.nii.gz")
>imaging.suff.stat()
?imaging.suff.stat
suff<-imaging.suff.stat(path.img,path.mask,1)
?imaging.cp.mat
cp<-imaging.cp.mat(path.img,path.mask,suff$mean,suff$sd)
?pc.var
vari<-pc.var(cp,suff$total.n)
library(roxygen2)
library("devtools")
setwd("~/Documents/NeuroImaging/Segmentation/ISLES/Lesion_Intensity/medals/")
document()
detach("package:medals",unload = TRUE)
install_github("jmmaronge/medals")
install_github("jmmaronge/medals")
library(medals)
setwd("~/")
vari<-pc.var(cp,suff$total.n)
vari
vari$cumvar
?make.score.img
detach("package:medals",unload = TRUE)
library(medals)
?make.score.img
library(medals)
?make.score.img
scores<-make.score.img(path.img,path.mask,cp,1:3)
scores<-medals::make.score.img(path.img,path.mask,cp,1:3)
?make.score.img
library(medals)
library(devtools)
install_github("jmmaronge/medals")
library(medals)
suff<-imaging.suff.stat(path.img,path.mask,1)
library(devtools)
install_github("jmmaronge/medals")
library(medals)
path.img<-list(list("~/Desktop/images_ISLES2015/training/flairTrimmedNormImg_Subject05.nii.gz","~/Desktop/images_ISLES2015/training/t1TrimmedNormImg_Subject05.nii.gz"),
list("~/Desktop/images_ISLES2015/training/flairTrimmedNormImg_Subject06.nii.gz","~/Desktop/images_ISLES2015/training/t1TrimmedNormImg_Subject06.nii.gz"))
path.mask<-list("~/Desktop/images_ISLES2015/training/brainmask_Subject05.nii.gz","~/Desktop/images_ISLES2015/training/brainmask_Subject06.nii.gz")
path.y<-list("~/Desktop/images_ISLES2015/training/ymask_Subject05.nii.gz","~/Desktop/images_ISLES2015/training/ymask_Subject06.nii.gz")
library(medals)
path.img<-list(list("~/Desktop/images_ISLES2015/training/flairTrimmedNormImg_Subject05.nii.gz","~/Desktop/images_ISLES2015/training/t1TrimmedNormImg_Subject05.nii.gz"),
list("~/Desktop/images_ISLES2015/training/flairTrimmedNormImg_Subject06.nii.gz","~/Desktop/images_ISLES2015/training/t1TrimmedNormImg_Subject06.nii.gz"))
path.mask<-list("~/Desktop/images_ISLES2015/training/brainmask_Subject05.nii.gz","~/Desktop/images_ISLES2015/training/brainmask_Subject06.nii.gz")
path.y<-list("~/Desktop/images_ISLES2015/training/ymask_Subject05.nii.gz","~/Desktop/images_ISLES2015/training/ymask_Subject06.nii.gz")
suff<-imaging.suff.stat(path.img,path.mask,1)
suff$mean
suff$sd
length(suff$mean)
?imaging.cp.mat
cp<-imaging.cp.mat(path.img,path.mask,suff$mean,suff$sd)
cp
pc.var(cp,suff$total.n)
?make.score.img
scores<-make.score.img(path.img,path.mask,cp,1:3)
scores
ortho2(scores[[1]][[1]])
library(fslr)
ortho2(scores[[1]][[1]])
ortho2(scores[[1]][[2]])
ortho2(scores[[1]][[3]])
ortho2(scores[[1]][[2]])
ortho2(scores[[2]][[2]])
?make.pred.img
preds<-(scores,path.mask,path.y,c("1","2"))
preds<-make.pred.img(scores,path.mask,path.y,c("1","2"))
library(devtools)
install_github("jmmaronge/medals")
library(medals)
library(devtools)
install_github("jmmaronge/medals")
library(medals)
?make.score.img
library(medals)
?make.pred.img
?make.score.img
?get.model.fit
fit<-get.model.fit(scores,path.mask,path.y,c("01",02))
fit
?make.pred.img
pred<-make.pred.img(scores,path.mask,fit,c("01","02"))
fit<-get.model.fit(scores,path.mask,path.y,c("01","02"))
pred<-make.pred.img(scores,path.mask,fit,c("01","02"))
library(fslr)
ortho2(pred[[1]])
strip.model = function(model){
model$y = c()
model$model = c()
model$residuals = c()
model$fitted.values = c()
model$effects = c()
model$qr$qr = c()
model$linear.predictors = c()
model$weights = c()
model$prior.weights = c()
model$data = c()
attr(model$terms,".Environment") = c()
attr(model$formula,".Environment") = c()
model
}
fit2<-strip.model(fit)
pred<-make.pred.img(scores,path.mask,fit2,c("01","02"))
fit2
library(medals)
def.fit
?fitted
?glmax
?glm
fit$terms
?get.model.fit
library(devtools)
install_github("jmmaronge/medals")
library(medals)
library(medals)
?predict
def.fit.2
summary(def.fit.2)
def.fit.2
?fitted
fit(def.fit.2)
?glm
def.fit.2$coefficients
def.fit.2$deviance
def.fit.2$rank
def.fit.2$aic
def.fit.2$residuals
install_github("jmmaronge/medals")
library(devtools)
install_github("jmmaronge/medals")
library(medals)
library(medals)
?get.model.fit
strip.model = function(model){
model$y = c()
model$model = c()
model$residuals = c()
model$fitted.values = c()
model$effects = c()
model$qr$qr = c()
model$linear.predictors = c()
model$weights = c()
model$prior.weights = c()
model$data = c()
attr(model$terms,".Environment") = c()
attr(model$formula,".Environment") = c()
model
}
install_github("jmmaronge/medals")
library(devtools)
install_github("jmmaronge/medals")
library(medals)
library(medals)
setwd("~/Documents/NeuroImaging/Segmentation/ISLES/Lesion_Intensity/medals/")
library("devtools")
document()
document()
setwd("~/Documents/NeuroImaging/Segmentation/ISLES/Lesion_Intensity/medals/")
document()
document()
install_github("jmmaronge/medals")
library(medals)
setwd("~/Documents/NeuroImaging/Segmentation/ISLES/Lesion_Intensity/medals/")
document()
library("devtools")
document()
library(medals)
build_vignette()
build_vignettes()
build_vignettes("medals")
build_vignettes()
build_vignettes("~/Documents/NeuroImaging/Segmentation/ISLES/Lesion_Intensity/medals/medals.Rproj")
build_vignettes("~/Documents/NeuroImaging/Segmentation/ISLES/Lesion_Intensity/medals/")
build_vignettes()
library(medals)
dir<-"~/Desktop/images_ISLES2015/training/"
subj<-c("05","06")
image.file<-vector(length = length(subj), mode = "list")
mask.file<-vector(length = length(subj), mode = "list")
y.file<-vector(length = length(subj), mode = "list")
for(i in 1:length(subj)){
image.file[[i]][[1]]<-paste0(dir,"flairTrimmedNormImg_Subject",subj[i],".nii.gz")
image.file[[i]][[2]]<-paste0(dir,"t1TrimmedNormImg_Subject",subj[i],".nii.gz")
image.file[[i]][[3]]<-paste0(dir,"t2TrimmedNormImg_Subject",subj[i],".nii.gz")
image.file[[i]][[4]]<-paste0(dir,"dwiTrimmedNormImg_Subject",subj[i],".nii.gz")
mask.file[[i]]<-paste0(dir,"brainmask_Subject",subj[i],".nii.gz")
y.file[[i]]<-paste0(dir,"ymask_Subject",subj[i],".nii.gz")
}
library(medals)
datadir<-"~/Desktop/images_ISLES2015/training/"
subj<-c("05","06")
image.file<-vector(length = length(subj), mode = "list")
mask.file<-vector(length = length(subj), mode = "list")
y.file<-vector(length = length(subj), mode = "list")
for(i in 1:length(subj)){
imgs = file.path(datadir,
paste0(c("flair", "t1", "t2", "dwi"),
"t1TrimmedNormImg_Subject",
subj[i], ".nii.gz"))
image.file[[i]][[1]] <- imgs[1]
image.file[[i]][[2]] <- imgs[2]
image.file[[i]][[3]] <- imgs[3]
image.file[[i]][[4]] <- imgs[4]
mask.file[[i]] <- file.path(datadir, paste0("brainmask_Subject", subj[i], ".nii.gz"))
y.file[[i]] <- file.path(datadir,
paste0("ymask_Subject", subj[i], ".nii.gz")
)
}
library(medals)
datadir<-"~/Desktop/images_ISLES2015/training/"
subj<-c("05","06")
image.file<-vector(length = length(subj), mode = "list")
mask.file<-vector(length = length(subj), mode = "list")
y.file<-vector(length = length(subj), mode = "list")
for(i in 1:length(subj)){
imgs = file.path(datadir,
paste0(c("flair", "t1", "t2", "dwi"),
"t1TrimmedNormImg_Subject",
subj[i], ".nii.gz"))
image.file[[i]][[1]] <- imgs[1]
image.file[[i]][[2]] <- imgs[2]
image.file[[i]][[3]] <- imgs[3]
image.file[[i]][[4]] <- imgs[4]
mask.file[[i]] <- file.path(datadir, paste0("brainmask_Subject", subj[i], ".nii.gz"))
y.file[[i]] <- file.path(datadir,
paste0("ymask_Subject", subj[i], ".nii.gz")
)
}
print(image.file)
library(medals)
suff<-imaging.suff.stat(path.img.list = image.file,
path.mask.list = mask.file,
mpower = 2 #### denotes highest order moment wanted
)
image.file
library(medals)
datadir<-"~/Desktop/images_ISLES2015/training/"
subj<-c("05","06")
image.file<-vector(length = length(subj), mode = "list")
mask.file<-vector(length = length(subj), mode = "list")
y.file<-vector(length = length(subj), mode = "list")
for(i in 1:length(subj)){
imgs = file.path(datadir,
paste0(c("flair", "t1", "t2", "dwi"),
"TrimmedNormImg_Subject",
subj[i], ".nii.gz"))
image.file[[i]][[1]] <- imgs[1]
image.file[[i]][[2]] <- imgs[2]
image.file[[i]][[3]] <- imgs[3]
image.file[[i]][[4]] <- imgs[4]
mask.file[[i]] <- file.path(datadir, paste0("brainmask_Subject", subj[i], ".nii.gz"))
y.file[[i]] <- file.path(datadir,
paste0("ymask_Subject", subj[i], ".nii.gz")
)
}
suff<-imaging.suff.stat(path.img.list = image.file,
path.mask.list = mask.file,
mpower = 2 #### denotes highest order moment wanted
)
library(medals)
datadir<-"~/Desktop/images_ISLES2015/training/"
subj<-c("05","06")
image.file<-vector(length = length(subj), mode = "list")
mask.file<-vector(length = length(subj), mode = "list")
y.file<-vector(length = length(subj), mode = "list")
for(i in 1:length(subj)){
imgs = file.path(datadir,
paste0(c("flair", "t1", "t2", "dwi"),
"TrimmedNormImg_Subject",
subj[i], ".nii.gz"))
image.file[[i]][[1]] <- imgs[1]
image.file[[i]][[2]] <- imgs[2]
image.file[[i]][[3]] <- imgs[3]
image.file[[i]][[4]] <- imgs[4]
mask.file[[i]] <- file.path(datadir, paste0("brainmask_Subject", subj[i], ".nii.gz"))
y.file[[i]] <- file.path(datadir,
paste0("ymask_Subject", subj[i], ".nii.gz")
)
}
suff<-imaging.suff.stat(path.img.list = image.file,
path.mask.list = mask.file,
mpower = 2 #### denotes highest order moment wanted
)
suff
length(suff)
names(suff)
suff$mean
cp <- imaging.cp.mat(mean.vec = suff$mean,
sd.vec = suff$sd,
n.vec = suff$n,
cp.list = suff$cp.mats
)
cp
load <- get.loadings(cp)
load
dim(load)
dim(cp)
scores <- make.score.img(
path.img.list = image.file,
path.mask.list = mask.file,
loads = load,
which.scores = 1:8
)
library(medals)
?eval
.GlobalEnv
.GlobalEnv()
library(medals)
